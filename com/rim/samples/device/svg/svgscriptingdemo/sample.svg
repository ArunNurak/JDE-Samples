<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="tiny"
     xmlns:ev="http://www.w3.org/2001/xml-events" onload="init(evt)">
    
    <!-- Scripts may be embedded into svg's through a <script> tag. These scripts
         allow for dynamic content to be generated and expand the interactivity of
         the svg objects. This sample uses an embedded ECMAScript to generate a new
         animation by manipulating the DOM Tree of the svg document.
         
         It is also possible to reference external script files using the
         xlink:href attribute in the <script> element,
         e.g. <script type="application/ecmascript" xlink:href="script.es"/>
      -->
    <script type="application/ecmascript"> <![CDATA[
        // Keep track of key nodes.
        var SVGDocument = null;
        var SVGRoot = null;    
        var display = null;
        
        // Store namespace information used for elements.
        var svgns = "http://www.w3.org/2000/svg";
        var xlinkns = "http://www.w3.org/1999/xlink";
        
        // Store options for random path and colors.
        var pathTypes = "LCQ";
        var numPathPoints = new Array(1, 3, 2);       
        var colors = new Array("silver", "gray", "maroon", "red", "purple",
                               "fuchsia", "green", "lime", "olive", "yellow",
                               "navy", "blue", "teal", "aqua");
                               
        var quadrantSize = 150;      

        /**
         * Initializes this script.
         * 
         * @param evt The event triggering the initialization.
         */
        function init(evt)
        {
            // Define some commonly used elements.
            SVGDocument = evt.target.ownerDocument;
            SVGRoot = SVGDocument.documentElement; 
            display = SVGDocument.getElementById("display");              
            
            // Add the original quadrant to the display.
            var original = SVGDocument.createElementNS(svgns, "g");
            original.setAttribute("id", "original");
            display.appendChild(original);      
        }  

        /**
         * Generates a random integer in a specified range.
         * 
         * @param range The range of numbers that can be produced.
         * @return An integer between 0 (inclusive) and "range" (exclusive).
         */
        function randInt(range)
        {
            return Math.floor(Math.random() * range);
        }     
        
        /**
         * Generates a random color.
         * 
         * @return A random color in String form.
         */ 
        function randColor()
        {
            return colors[randInt(colors.length)];
        }
        
        /**
         * Generate (x,y) so that the circle centered at (x,y) with radius r lies
         * entirely inside the upper left quadrant of a circle centered at 
         * (quadrantSize, quadrantSize) with radius quadrantSize.
         * 
         * @param r The radius of the smaller circle to be centered at (x,y)
         * @return A random point (x,y) circle.
         */ 
        function randPoint(r)
        {
            var q = quadrantSize;
            for (;;)
            {
                // Choose two random points within the bounding square of the
                // upper left quadrant of the large circle.
                var x = r + (q - r) * Math.random();
                var y = r + (q - r) * Math.random();
                
                // Check if it also within the bounds of the large circle.
                if ( ((q - x) * (q - x) + (q - y) * (q - y)) <= ((q - r) * (q - r)) )
                {
                    return x + "," + y;
                }
            }
        }   
        
        /**
         * Generate a random path along which a circle travels.
         * 
         * @param steps The number of steps with which to make up the random path.
         * @param radius The radius of the circle.
         */ 
        function generateRandomPath(steps, radius)
        {         
            var path = "M" + randPoint(radius);
            for (var step = 1; step <= steps; step++)
            {
                var n = randInt(pathTypes.length);
                var subPath = pathTypes.charAt(n);
                for (var numCoordinates = numPathPoints[n]; numCoordinates > 0; numCoordinates--)
                {               
                    subPath += " " + randPoint(radius);
                }              
                path += " " + subPath;
            }
            return path + " Z";
        }     
        
        /**
         * Creates the background of the display area.
         */
        function makeBackground()
        {
            // Create the background circle.           
            var fullSize = quadrantSize * 2;
            var circle = SVGDocument.createElementNS(svgns, "circle");                 
            circle.setAttribute("r", randInt(20) + 5);        
            circle.setAttribute("fill", randColor());
            circle.setAttribute("fill-opacity", "0.2");
            circle.setAttribute("cx", quadrantSize);
            circle.setAttribute("cy", quadrantSize);
            display.appendChild(circle);
            
            // Animate the background circle to grow to its full size.
            var animateR = SVGDocument.createElementNS(svgns, "animate");
            animateR.setAttribute("dur", "5s");
            animateR.setAttribute("fill", "freeze");
            animateR.setAttribute("begin", "play.click");   
            animateR.setAttribute("end", "stop.click");               
            animateR.setAttribute("attributeName", "r");
            animateR.setAttribute("to", quadrantSize);
            circle.appendChild(animateR);
            
            // Show the axis.
            var axis = SVGDocument.createElementNS(svgns, "path"); 
            axis.setAttribute("stroke", randColor());
            axis.setAttribute("stroke-width", "2");
            axis.setAttribute("stroke-opacity", "0.6");
            axis.setAttribute("d", "M1 " + quadrantSize + " L" + (fullSize-1) + " " + quadrantSize + // horizontal
                                   " M" + quadrantSize + " 1 L" + quadrantSize + " " + (fullSize-1)); // vertical
            display.appendChild(axis);      
        }
        
    
        /**
         * Fills the "original" quadrant with animated circles.
         * 
         * @param numOfCircles The number of circles to place in the quadrant.
         */
        function makeOriginalQuadrant(numOfCircles)
        {
            // Fill the original quadrant with animated circles.
            var original = SVGDocument.getElementById("original");            
            for (var circleNo = 1; circleNo <= numOfCircles; circleNo++)
            {
                // Create a circle to display.              
                var circle = SVGDocument.createElementNS(svgns, "circle");              
                var radius = randInt(20) + 5;
                circle.setAttribute("r", radius);
                circle.setAttribute("fill-opacity", 0.5 * Math.random() + 0.5);     // [0.5, 1.0] 
                circle.setAttribute("fill", randColor());
                circle.setAttribute("cx", 0);
                circle.setAttribute("cy", 0);
                original.appendChild(circle);
                
                // Animate the circle along a random path.
                var animMotion = SVGDocument.createElementNS(svgns, "animateMotion");          
                animMotion.setAttribute("dur", "5s");
                animMotion.setAttribute("fill", "freeze");
                animMotion.setAttribute("begin", "play.click");       
                animMotion.setAttribute("end", "stop.click");  
                animMotion.setAttribute("repeatCount", "indefinite");
                animMotion.setAttribute("path", generateRandomPath(5, radius));
                circle.appendChild(animMotion);  
                
                // Animate the circle's color.             
                var animColor = SVGDocument.createElementNS(svgns, "animate");
                animColor.setAttribute("attributeName", "fill");
                animColor.setAttribute("dur", "5s");
                animColor.setAttribute("fill", "freeze");
                animColor.setAttribute("begin", "play.click");   
                animColor.setAttribute("end", "stop.click");                  
                animColor.setAttribute("repeatCount", "indefinite");
                animColor.setAttribute("to", randColor());              
                circle.appendChild(animColor);    
           }       
        }    
        
        /**
         * Creates a new quadrant by copying the "original" quadrant and 
         * applying a transformation onto it.
         * 
         * @param transformation The transformation to apply to the original quadrant.
         */
        function makeTransformedQuadrant(transformation)
        {
            var original = SVGDocument.getElementById("original");
            
            // Make the transformed quadrant.
            var transformedQuadrant = SVGDocument.createElementNS(svgns, "g");    
            transformedQuadrant.setAttribute("transform", transformation);
            display.appendChild(transformedQuadrant);  
            
            // Copy the contents of the original contents using a <use> tag.
            var copy = SVGDocument.createElementNS(svgns, "use");   
            copy.setAttributeNS(xlinkns, "href", "#original");
            transformedQuadrant.appendChild(copy);      
        }
        
        /**
         * Removes all the removable children from a given parent. If the child
         * is not removable (has an id) this method will try to delete any 
         * removable children in the subtree of the child possesing the id.
         * 
         * @param parent The parent node to remove all the removable children from.
         */
        function removeAllRemovable(parent)
        {            
            var child = parent.firstElementChild;            
            while (child != null)
            {          
                var next = child.nextElementSibling;
                if (child.getAttribute("id") == null) // Can't remove elements with ids
                {
                    parent.removeChild(child);                     
                }
                else // If element has an id, then try removing the child's children
                {
                    removeAllRemovable(child);
                }            
                child = next;
            }
        }   

        /**
         * Handles the onclick event for the "play" button.
         * 
         * @param evt The event that triggered this handler call.
         */
        function play(evt)
        {       
            // Clear the svg display and make the background.   
            removeAllRemovable(display);
            makeBackground();                    

            // Make the four quadrants, using the original quadrant and reflecting it
            // across the x and y axis to produce mirror images.
            makeOriginalQuadrant(8);        
            var fullSize = quadrantSize * 2;            
            makeTransformedQuadrant("matrix(-1 0 0 1 " + fullSize + " 0)");      
            makeTransformedQuadrant("matrix(-1 0 0 -1 " + fullSize + " " + fullSize + ")"); 
            makeTransformedQuadrant("matrix(1 0 0 -1 0 " + fullSize + ")");              
        }            
    ]]></script>
  
    <!--
        Note: The svg file must at least have one animation element in order 
              for the animation engine to activate. 
      -->      

    <!-- Display area to show the svg animation -->
    
    <g id="display" opacity="0">   
        <animate id="fade-in" attributeName="opacity" begin="play.click" from="0" to="1" dur="9s" fill="freeze"/>
        <animate id="fade-out" attributeName="opacity" begin="stop.click" from="1" to="0" dur="2s" fill="freeze"/>
    </g>
    
    <!-- Buttons to play and stop the svg animation -->
    <g id="stop" fill-opacity="0.4" stroke-opacity="0.4">
        <circle id="c1" r="40" stroke="navy" stroke-width="5" fill="none"/>
        <polygon id="p1" points="-22,22 -22,-22 22,-22 22,22" fill="blue"/>
        <set attributeName="fill-opacity" to="1.0" begin="stop.focusin"/>
        <set attributeName="fill-opacity" to="0.4" begin="stop.focusout"/>
        <set attributeName="stroke-opacity" to="1.0" begin="stop.focusin"/>
        <set attributeName="stroke-opacity" to="0.4" begin="stop.focusout"/>
        
    </g>
    <g id="play" onclick="play(evt)">
        <circle r="40" stroke="navy" stroke-width="5" fill="none"/>
        <polygon points="-20,25.6 -20,-25.6 32,0" fill="blue"/>
        <set attributeName="fill-opacity" to="1.0" begin="play.focusin"/>
        <set attributeName="fill-opacity" to="0.4" begin="play.focusout"/>
        <set attributeName="stroke-opacity" to="1.0" begin="play.focusin"/>
        <set attributeName="stroke-opacity" to="0.4" begin="play.focusout"/>
    </g>
</svg>

